// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.5
// source: rpc/fuseftp.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FuseFTP_Version_FullMethodName      = "/datawire.fuseftp.FuseFTP/Version"
	FuseFTP_Mount_FullMethodName        = "/datawire.fuseftp.FuseFTP/Mount"
	FuseFTP_Unmount_FullMethodName      = "/datawire.fuseftp.FuseFTP/Unmount"
	FuseFTP_SetFtpServer_FullMethodName = "/datawire.fuseftp.FuseFTP/SetFtpServer"
)

// FuseFTPClient is the client API for FuseFTP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The Connector service is responsible for connecting to the traffic manager
// and manage intercepts. It can only run when a Daemon is running.
type FuseFTPClient interface {
	// Returns version information from the Connector
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionInfo, error)
	// Mounts a remote directory and returns an identifier for the mount
	Mount(ctx context.Context, in *MountRequest, opts ...grpc.CallOption) (*MountIdentifier, error)
	// Unmounts the given identifier
	Unmount(ctx context.Context, in *MountIdentifier, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SetFtpServer changes the FTP server for a given mount identifier
	SetFtpServer(ctx context.Context, in *SetFtpServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type fuseFTPClient struct {
	cc grpc.ClientConnInterface
}

func NewFuseFTPClient(cc grpc.ClientConnInterface) FuseFTPClient {
	return &fuseFTPClient{cc}
}

func (c *fuseFTPClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VersionInfo)
	err := c.cc.Invoke(ctx, FuseFTP_Version_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuseFTPClient) Mount(ctx context.Context, in *MountRequest, opts ...grpc.CallOption) (*MountIdentifier, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MountIdentifier)
	err := c.cc.Invoke(ctx, FuseFTP_Mount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuseFTPClient) Unmount(ctx context.Context, in *MountIdentifier, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FuseFTP_Unmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuseFTPClient) SetFtpServer(ctx context.Context, in *SetFtpServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FuseFTP_SetFtpServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FuseFTPServer is the server API for FuseFTP service.
// All implementations must embed UnimplementedFuseFTPServer
// for forward compatibility.
//
// The Connector service is responsible for connecting to the traffic manager
// and manage intercepts. It can only run when a Daemon is running.
type FuseFTPServer interface {
	// Returns version information from the Connector
	Version(context.Context, *emptypb.Empty) (*VersionInfo, error)
	// Mounts a remote directory and returns an identifier for the mount
	Mount(context.Context, *MountRequest) (*MountIdentifier, error)
	// Unmounts the given identifier
	Unmount(context.Context, *MountIdentifier) (*emptypb.Empty, error)
	// SetFtpServer changes the FTP server for a given mount identifier
	SetFtpServer(context.Context, *SetFtpServerRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedFuseFTPServer()
}

// UnimplementedFuseFTPServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFuseFTPServer struct{}

func (UnimplementedFuseFTPServer) Version(context.Context, *emptypb.Empty) (*VersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedFuseFTPServer) Mount(context.Context, *MountRequest) (*MountIdentifier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mount not implemented")
}
func (UnimplementedFuseFTPServer) Unmount(context.Context, *MountIdentifier) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unmount not implemented")
}
func (UnimplementedFuseFTPServer) SetFtpServer(context.Context, *SetFtpServerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFtpServer not implemented")
}
func (UnimplementedFuseFTPServer) mustEmbedUnimplementedFuseFTPServer() {}
func (UnimplementedFuseFTPServer) testEmbeddedByValue()                 {}

// UnsafeFuseFTPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FuseFTPServer will
// result in compilation errors.
type UnsafeFuseFTPServer interface {
	mustEmbedUnimplementedFuseFTPServer()
}

func RegisterFuseFTPServer(s grpc.ServiceRegistrar, srv FuseFTPServer) {
	// If the following call pancis, it indicates UnimplementedFuseFTPServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FuseFTP_ServiceDesc, srv)
}

func _FuseFTP_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuseFTPServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuseFTP_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuseFTPServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuseFTP_Mount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuseFTPServer).Mount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuseFTP_Mount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuseFTPServer).Mount(ctx, req.(*MountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuseFTP_Unmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuseFTPServer).Unmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuseFTP_Unmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuseFTPServer).Unmount(ctx, req.(*MountIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuseFTP_SetFtpServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFtpServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuseFTPServer).SetFtpServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuseFTP_SetFtpServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuseFTPServer).SetFtpServer(ctx, req.(*SetFtpServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FuseFTP_ServiceDesc is the grpc.ServiceDesc for FuseFTP service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FuseFTP_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datawire.fuseftp.FuseFTP",
	HandlerType: (*FuseFTPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _FuseFTP_Version_Handler,
		},
		{
			MethodName: "Mount",
			Handler:    _FuseFTP_Mount_Handler,
		},
		{
			MethodName: "Unmount",
			Handler:    _FuseFTP_Unmount_Handler,
		},
		{
			MethodName: "SetFtpServer",
			Handler:    _FuseFTP_SetFtpServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/fuseftp.proto",
}
